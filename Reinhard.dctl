#line 2 "dynamic_range_compressor.dctl"
#include "utilities.h"

DEFINE_UI_PARAMS(key, key, DCTLUI_SLIDER_FLOAT, 0.3, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(x_sample, x_sample, DCTLUI_SLIDER_INT, 5, 1, 20, 1)
DEFINE_UI_PARAMS(y_sample, y_sample, DCTLUI_SLIDER_INT, 5, 1, 20, 1)
DEFINE_UI_PARAMS(dynamic, Dynamic, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(staic_value, static_value, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(method, Clip, DCTLUI_CHECK_BOX, 0)

// Main transform function
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
    // Variables to hold the peak and average luminance
    float peakLuminance = 0.0;
    float averageLuminance = 0.0;
    // Only calculate the peak luminance if we are processing pixel (0,0)
    if (p_X == 0 && p_Y == 0)
    {
        for (int y = 0; y < p_Height; y += y_sample)
        {
            for (int x = 0; x < p_Width; x += x_sample)
            {
                float r = _tex2D(p_TexR, x, y);
                float g = _tex2D(p_TexG, x, y);
                float b = _tex2D(p_TexB, x, y);

                float3 color = make_float3(r, g, b);
                float3 xyz = rgbToXyz(color);
                float3 lab = xyzToLab(xyz);

                float luminance = lab.x;

                if (luminance > peakLuminance)
                {
                    peakLuminance = luminance;
                }
                averageLuminance += luminance;
            }
        }
        averageLuminance /= (p_Width * p_Height);
        // Store the peak luminance in pixel (0,0)
        return make_float3(peakLuminance, averageLuminance, 0.00);
    }
    else
    {
        // Fetch the peak luminance stored in pixel (0,0)
        float peakLuminance = _tex2D(p_TexR, 0, 0); // Assuming peak luminance is stored in the red channel of pixel (0,0)
        float averageLuminance = _tex2D(p_TexG, 0, 0); // Assuming average luminance is stored in the green channel of pixel (0,0)
        // Fetch the RGB values of the current pixel
        float r = _tex2D(p_TexR, p_X, p_Y);
        float g = _tex2D(p_TexG, p_X, p_Y);
        float b = _tex2D(p_TexB, p_X, p_Y);

        float3 color = make_float3(r, g, b);
        float3 xyz = rgbToXyz(color);
        float3 lab = xyzToLab(xyz);

        // Apply Reinhard tone mapping to the luminance
        lab.x = reinhard(lab.x, averageLuminance * key, dynamic ? peakLuminance: staic_value);

        // Convert back to RGB
        xyz = labToXyz(lab);
        float3 mappedColor = xyzToRgb(xyz);

        // Apply simple clipping for gamut compression
        float3 minGamut = make_float3(0.0, 0.0, 0.0); // Assume the target gamut minimum is 0
        float3 maxGamut = make_float3(1.0, 1.0, 1.0); // Assume the target gamut maximum is 1

        float3 result;
        switch (method) {
            case 1:
                result = simpleClip(mappedColor, minGamut, maxGamut);
                break;
            // Add other methods if needed
            default:
                result = mappedColor; // No additional gamut compression
                break;
        }
        return result;
    }
}
